!-----------------------------------------------------------------------------!

      subroutine energy_differences(e, m, n, w_nm, lp)
      
      !take energies e and find energy differences (w_nm)
      !with indices in lp

!-----------------------------------------------------------------------------!

      subroutine bin_frequencies(n, m, nlw, nuw, deltal, deltau, wmax, &
                w_nm, lp, sx, sy, sz, num_cores, rab, r0)

      !bin contributions to spin correlation tensors (rab, r0)
      !depending on frequency (w_nm) with binning parameters
      !nlwi, deltalm deltau, wmax

!-----------------------------------------------------------------------------!

      subroutine sy_symmetric_combined(m, e, ps, k, num_cores, &
      c0)

      !calculate exact singlet yield using closed form expression
      !for non-separable RP using state energies (e), singlet
      !project operator (ps) and recombination rate (k)

!-----------------------------------------------------------------------------!

      subroutine sy_symmetric_separable(ma, mb, k, e_a, e_b, sxa, sxb, sya, syb, sza ,szb, &
      num_cores, c0)

      !calculate exact singlet yield using closed form expression
      !for separable radicals. Inputs Cartesian spin operators (sxa
      !etc.), radical energies (ea, eb) and recombination rate (k)

!-----------------------------------------------------------------------------!

      subroutine sy_symmetric_approx(ma, mb, k, ea, eb, sxa, sxb, sya, syb, sza ,szb, tol, &
      num_cores, c0)

      !calculate approximate singlet yield by only considering
      !energy pairs with energy gap smaller than some threshold
      !Inputs Cartesian spin operators (sxa etc.), radical energies 
      !(ea, eb) and recombination rate (k)

!-----------------------------------------------------------------------------!

      subroutine sy_symmetric_spincorr(raba, rabb, r0a, r0b, w_bina, w_binb, &
                tol, k, nw, num_cores, c0)

      !calculate approximate singlet yield using binning method
      !by discretising in frequency space of spin correlation tensors

!-----------------------------------------------------------------------------!

      subroutine degeneracy_check(e, k, tol, m, ni, ng)

      !find near degeneracies in radical states, energy (e)
      !relative to recombination rate (k) and some tolerance

!-----------------------------------------------------------------------------!

      subroutine get_indices(ep, ma, mb, m, inds)

      !get the indicies of energy array when combining 
      !energy arrays from the two radicals 


!-----------------------------------------------------------------------------!

      subroutine perturbation_matrix(sxa, sxb, sya, syb, sza, szb, ks, kt, e, &
                                     ni, inds, imin, &
                                     pm, rho0, ps)

      !build matrix of nearly degenerate states for perturbative matrix
      !diagonalisation

!-----------------------------------------------------------------------------!

      subroutine sy_asymmetric(rho0, ps, c, ks, ni, num_cores, c0)

      !Calculate the contribution to the singlet yield of a nearly
      !degenerate block

!-----------------------------------------------------------------------------!

      subroutine sy_floquet(ma, mb, k, e_a, e_b, sxa, sxb, sya, syb, sza ,szb, &
                        sxa1, sxb1, sya1, syb1, sza1, szb1, num_cores, c0)

      !calculate the singlet yield from effective matrices

!-----------------------------------------------------------------------------!

      subroutine sy_floquet_combined(m, k, e, ps, ps1, num_cores, &
                        c0)

      !calculate singlet yield from effective matrices in combined
      !Hilbert space

!-----------------------------------------------------------------------------!

      subroutine single_frequency_build_matrix(m, e, sx, sy, sz, h1, k, &
                        w_rf, phase, tol, &
                        h2, sx1, sy1, sz1, sx2, sy2, sz2)

      !build degenerate block of floquet hamiltonian and corresponding 
      !cartesian spin operators

!-----------------------------------------------------------------------------!

      subroutine single_frequency_build_matrix_combined(m, e, ps, h1, k, &
                        w_rf, phase, tol, h2, ps1, ps2)

      !build effective floquet hamiltonian and corresponding 
      !cartesian spin operators

!-----------------------------------------------------------------------------!

      subroutine broadband_build_matrix(m, e, sx, sy, sz, k, w1, phases, thetas, phis, &
                        wrf_0, wrf_min, wrf_max, &
                        h2, sx1, sy1, sz1, sx2, sy2, sz2)

      !build effective floquet Hamiltonian with an array of values of
      !the Fourier index

!-----------------------------------------------------------------------------!

      subroutine broadband_build_matrix_combined(m, e, sx, sy, sz, ps, k, w1, &
                        phases, thetas, phis, wrf_0, wrf_min, wrf_max, &
                        h2, ps1, ps2)

      !build effective floquet Hamiltonian with an array of values of
      !the Fourier index

!-----------------------------------------------------------------------------!

      subroutine sy_gamma_compute(num_cores, m, nt, jj, omega_rs, omega_rf, k, &
                       phi_s)
      implicit none

      !Calculates the singlet yield as final step in gamma-compute
      !algorithm

!-----------------------------------------------------------------------------!

      subroutine complexgramschmidt(num_cores, m, x, x1)

      !Carries out gram schmidt orthogonalisation of eigenvectors
      !of non-Hermitian matrix
 

!-----------------------------------------------------------------------------!

      subroutine get_omega_rs(num_cores, m, wrf, lambda, wrs)

      !Finds ratio of pairs of eigenvalues

!-----------------------------------------------------------------------------!

      subroutine trajectories.sy_kmc(m, ntraj, e, evi, ps, pt, ks, kt, svecs, ncores, &
                        c0)

      !Compute the average of ntraj trajectories in a kinetic Monte
      !Carlo algorithm

